name: Linux Build

# Controls when the action will run. Triggers the workflow on push or pull request events
on:
  push:
    paths-ignore:
      - .gitignore
      - "**/*.md"
      - .clang-format
      - debian-packager/
      - bin/PCSX2_keys.ini.default
      - "pcsx2/PAD/Windows/**"
  pull_request:
    paths-ignore:
      - .gitignore
      - "**/*.md"
      - .clang-format
      - debian-packager/
      - bin/PCSX2_keys.ini.default
      - "pcsx2/PAD/Windows/**"

jobs:
  build:
    strategy:
      # Prevent one build from failing everything (although maybe those should be included as experimental builds instead)
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: x86
            compiler: gcc
            experimental: false
          - os: ubuntu-latest
            platform: x64
            compiler: gcc
            experimental: false
          - os: ubuntu-latest
            platform: x86
            compiler: clang
            # Need to disable PCH until cmake 3.17
            # (PCH conflicts with ccache, fixed by https://gitlab.kitware.com/cmake/cmake/-/merge_requests/4400)
            cmakeflags: -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON
            detail: -nopch
            experimental: false
          - os: ubuntu-latest
            platform: x86
            compiler: gcc
            cmakeflags: -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON
            detail: -nopch
            experimental: false

    name: ${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.compiler }}${{ matrix.detail }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    # Set some sort of timeout in the event of run-away builds.  We are limited on concurrent jobs so, get rid of them.
    timeout-minutes: 30

    steps:
      # NOTE - useful for debugging
      # - name: Dump GitHub context
      #   env:
      #     GITHUB_CONTEXT: ${{ toJson(github) }}
      #   run: |
      #     echo "$GITHUB_CONTEXT"
      #     echo ${{ github.event.pull_request.title }}

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Cache Submodules
        id: cache-submodules
        uses: actions/cache@v2
        with:
          key: submodules-${{ hashFiles('./.gitmodules') }}
          path: |
            ./.git/modules/
            ./3rdparty/fmt
            ./3rdparty/xz
            ./3rdparty/yaml-cpp
            ./3rdparty/gtest
            ./3rdparty/libchdr

      - name: Checkout Submodules
        run: git submodule update --init --recursive -j $(getconf _NPROCESSORS_ONLN)

      # -- SETUP CCACHE - https://cristianadam.eu/20200113/speeding-up-c-plus-plus-github-actions-using-ccache/
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: ccache cache files
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.compiler }}${{ matrix.detail }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: ${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.compiler }}${{ matrix.detail }}-ccache-

      - name: Install Packages
        env:
          PLATFORM: ${{ matrix.platform }}
          COMPILER: ${{ matrix.compiler }}
        run: .github/workflows/scripts/linux/install-packages.sh

      - name: Generate CMake
        env:
          PLATFORM: ${{ matrix.platform }}
          COMPILER: ${{ matrix.compiler }}
          ADDITIONAL_CMAKE_ARGS: ${{ matrix.cmakeflags }}
        run: .github/workflows/scripts/linux/generate-cmake.sh

      - name: Build PCSX2
        working-directory: build
        run: ../.github/workflows/scripts/linux/compile.sh

      - name: Prepare Artifact Metadata
        id: artifact-metadata
        run: |
          ARCH=${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.compiler }}${{ matrix.detail }}
          ARTIFACT_NAME=""
          if [ ${{ github.event_name }} == "pull_request" ]; then
            PR_SHA=$(git rev-parse --short "${{ github.event.pull_request.head.sha }}")
            ARTIFACT_NAME="PCSX2-${ARCH}"
            if [ ! -z "${{ github.event.pull_request.number }}" ]; then
              PR_NUM=${{ github.event.pull_request.number }}
              ARTIFACT_NAME="${ARTIFACT_NAME}-pr[${PR_NUM}]"
            fi
            ARTIFACT_NAME="${ARTIFACT_NAME}-sha[${PR_SHA}]"
            if [ ! -z "${{ github.event.pull_request.title }}" ]; then
              PR_TITLE=$(echo "${{ github.event.pull_request.title }}" | tr -cd '[a-zA-Z0-9[:space:]]_-')
              ARTIFACT_NAME="${ARTIFACT_NAME}-title["${PR_TITLE}""
            fi
          else
            SHA=$(git rev-parse --short "$GITHUB_SHA")
            ARTIFACT_NAME="PCSX2-${ARCH}-sha[${SHA}"
          fi
          TRIMMED_ARTIFACT_NAME=$(printf "%.199s]" "$ARTIFACT_NAME")
          echo "name=$TRIMMED_ARTIFACT_NAME"
          echo "##[set-output name=name;]${TRIMMED_ARTIFACT_NAME}"

      - name: Prepare Artifact Folder
        run: |
          mv bin "${{ steps.artifact-metadata.outputs.name }}"
          tar -zcvf pcsx2.tar.gz "${{ steps.artifact-metadata.outputs.name }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.artifact-metadata.outputs.name }}
          path: pcsx2.tar.gz
          retention-days: 30 #https://docs.github.com/en/free-pro-team@latest/actions/reference/usage-limits-billing-and-administration#artifact-and-log-retention-policy
